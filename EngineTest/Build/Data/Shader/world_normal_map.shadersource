struct VInput
{
	float3 position : POSITION;
	float2 uv : UV;
  float3 normal : NORMAL;
  float4 tangent : TANGENT;
};

struct VOut
{
	  float4 position : SV_POSITION;
    float2 uv : UV;
    float4x4 TBNTransform : NORMAL;          
};

Texture2D<float4> tNormal : register(t1);
SamplerState sNormal : register(s1);

cbuffer cameraConstants : register(b1)
{
   float4x4 CAMERA;
   float4x4 VIEW; 
   float4x4 PROJECTION; 
};

cbuffer modelConstant : register(b2)
{
   float4x4 MODEL; 
};


VOut VertexFunction(VInput input)
{
    float4 localPos = float4(input.position, 1.0f);
    float4 worldPos = mul(MODEL, localPos);
    float4 viewPos = mul(VIEW, worldPos); 
    float4 clipPos = mul(PROJECTION, viewPos); 

    VOut output;
    output.position = clipPos;
    output.uv = input.uv;

    float3 worldNormal = normalize(mul(MODEL, float4(input.normal, 0.f)).xyz);
    float3 worldTangent = normalize(mul(MODEL , float4(input.tangent.xyz, 0.f)).xyz);
    float3 worldBitangent = cross(worldTangent, worldNormal) * input.tangent.w;
    output.TBNTransform = transpose(float4x4(float4(worldTangent, 0.f), float4(worldBitangent, 0.f), float4(worldNormal, 0.f), float4(worldPos.xyz, 1.0f)));

    return output;
}


float3 CalculateWorldNormal(float4 color, float4x4 tbnTransform)
{
  // Range map the values (Z should be between 0.5 and 1.0 always
  float3 surfaceNormal = normalize(2.f * color.xyz - float3(1.f, 1.f, 1.f));
  return mul(tbnTransform, float4(surfaceNormal, 0.f)).xyz;
}

float4 FragmentFunction( VOut input ) : SV_Target0
{
  float4 normalColor = tNormal.Sample(sNormal, input.uv);
  float3 worldNormal = CalculateWorldNormal(normalColor, input.TBNTransform);

  return float4(0.5f * (worldNormal + float3(1.0f, 1.0f, 1.0f)), 1.0f);   
}
