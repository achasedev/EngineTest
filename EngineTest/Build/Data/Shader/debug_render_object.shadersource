struct VInput
{
	float3 position : POSITION;
	float4 color : COLOR;
	float2 uv : UV;
};

struct VOut
{
	 float4 position : SV_POSITION;
    float4 color : COLOR;
    float2 uv : UV;
};

Texture2D<float4> tAlbedo : register(t0);
SamplerState sAlbedo : register(s0);

cbuffer cameraConstants : register(b1)
{
   float4x4 CAMERA;
   float4x4 VIEW; 
   float4x4 PROJECTION; 
};

cbuffer modelConstant : register(b2)
{
   float4x4 MODEL; 
};

cbuffer cbTint : register(b8)
{
   float4 TINT; 
};

VOut VertexFunction(VInput input)
{
    float4 localPos = float4(input.position, 1.0f);
    float4 worldPos = mul( MODEL, localPos );
    float4 viewPos = mul( VIEW, worldPos ); 
    float4 clipPos = mul( PROJECTION, viewPos ); 

    VOut output;

    output.position = clipPos;
    output.color = input.color;
    output.uv = input.uv;

    return output;
}

float4 FragmentFunction( VOut input ) : SV_Target0
{
   // First, we sample from our texture
   float4 texColor = tAlbedo.Sample( sAlbedo, input.uv ); 

   // Component wise multiply to "tint" the output
   float4 finalColor = texColor * TINT * input.color;

   // output it; 
   return finalColor; 
}