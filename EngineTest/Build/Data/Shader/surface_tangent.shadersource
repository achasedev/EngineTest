
struct VInput
{
	float3 position : POSITION;
	float4 color : COLOR;
	float2 uv : UV;
  float3 normal : NORMAL;
  float4 tangent : TANGENT;
};

struct VOut
{
	  float4 position : SV_POSITION;
    float3 localTangent : TANGENT;
};

Texture2D<float4> tAlbedo : register(t0);
SamplerState sAlbedo : register(s0);

cbuffer cameraConstants : register(b2)
{
   float4x4 CAMERA;
   float4x4 VIEW; 
   float4x4 PROJECTION; 
};

cbuffer modelConstant : register(b3)
{
   float4x4 MODEL; 
};

VOut VertexFunction(VInput input)
{
    float4 localPos = float4(input.position, 1.0f);
    float4 worldPos = mul( MODEL, localPos );
    float4 viewPos = mul( VIEW, worldPos ); 
    float4 clipPos = mul( PROJECTION, viewPos ); 

    VOut output;

    output.position = clipPos;
    output.localTangent = input.tangent.xyz;

    return output;
}


float4 FragmentFunction( VOut input ) : SV_Target0
{
    return float4(0.5f * (input.localTangent + float3(1.0f, 1.0f, 1.0f)), 1.0f); 
}